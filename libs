#pragma once

#include <iostream>
#include "Point.h"

//
template <class T> 
void vectorInfo(std::vector<T> v) {
    std::cout  << "size( ): " << v.size( ) 
        << "; capacity(): " << v.capacity() 
        << "; max_size(): " << v.max_size() << std::endl;
}

//
template <class T> 
void vectorPrint(std::vector<T> v) {
    for(int i =0;i<v.size(); i ++) {
        std::cout << "v.at(" << i << ") " << v.at(i) << std::endl;
    } 
}

// 
template <class T> 
void vectorPrint(std::vector<std::vector<T>> v) {
    for(int i =0;i<v.size(); i ++) {
        std::cout << "Row v.at(" << i << ")" << std::endl;
        vectorPrint(v.at(i));
    } 
}


// 
void vectorPrint(std::vector<Point> v) {
    for(int i =0;i<v.size(); i ++) {
        std::cout << "v.at(" << i << ") Point{x:" << v.at(i).getX() 
                << ", y:" <<  v.at(i).getY() << "}" << std::endl;
    } 
}

//
void vectorPrint(std::vector<Point*> v) {
    for(int i =0;i<v.size(); i ++) {
        std::cout << "v.at(" << i << ") Point{x:" << v.at(i)->getX() 
                << ", y:" <<  v.at(i)->getY() << "}" << std::endl;
    } 
}
