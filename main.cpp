 // Темы:
// Перегрузка операторов.
// Встроенные объекты 

//#include "stdafx.h"	//если Вы используете предкомпиляцию заголовочных
					//файлов, раскомментируйте эту строчку


#include "myString.h"
#include "Point.h"

#define	  stop 

int main(int argc, char* argv[])
{


	//Задание 1.Перегрузка операторов.

	//Подключите к проекту файлы MyString.cpp и MyString.h
	//класса MyString, разработанного Вами на предыдущем занятии
	//9a. Перегрузите оператор присваивания для класса MyString
	//Проверьте корректность работы перегруженного оператора

	{
		MyString s1("AAA"), s2;
		s2=s1;
		s1="CCC";
                
		s2= MyString("tmp");
		s1=s1;
                
                //std::cout << "s1: " << s1.GetString() << " , s2: " << s2.GetString() << "\n";
		stop
	}

/**/


	//Создайте класс Point, который будет содержать координаты
	//"точки". Объявите конструктор (конструкторы) класса   

	//1b. "Перегрузите" оператор += так, чтобы при выполнении
	//операции типа pt2+=pt1; складывались
	//одноименные переменные объектов pt1 и pt2, а сумма
	//присваивалась соответствующим переменным объекта pt2 или
	// в случае  pt2+=1; обе переменные объекта pt2 увеличивались на
	// указанное значение
	//a) с помощью метода класса (оператор +=)
	//б) с помощью глобальной функции (оператор -=)
	//Проверьте корректность работы перегруженного оператора
        {
            Point pt1(1,1);
            Point pt2(2,2);
            pt2+=pt1;//3.3
            pt2+=1;//4,4
            Point pt3(3,3);
            pt2+=pt1+=pt3;//8,8|4,4
            
            std::cout << pt1.getX() << ":" << pt1.getY() << "\n";//4,4
            std::cout << pt2.getX() << ":" << pt2.getY() << "\n";//8,8
	}
        stop
/**/

	//Задание 1c. Перегрузите оператор +/- 
	//a)с помощью методов класса (оператор +)
	//б) с помощью  глобальных функций (оператор -)
	//так, чтобы любая из закомментированных строк
	//кода выполнялась корректно
	{
            Point pt1(1,1);
            Point pt2(2,2);
            Point pt3;

            pt3 = pt1 + 5;//6,6
            std::cout << pt3.getX() << ":" << pt3.getY() << "\n";//6,6
            pt3 = 2 + pt1;//3,3
            std::cout << pt3.getX() << ":" << pt3.getY() << "\n";//3,3
            pt3 = pt1 + pt2;
            std::cout << pt3.getX() << ":" << pt3.getY() << "\n";//3,3

            pt3 = pt1 - 5;
            std::cout << pt3.getX() << ":" << pt3.getY() << "\n";//-4,-4
            pt3 = pt1 - pt2;
            std::cout << pt3.getX() << ":" << pt3.getY() << "\n";//-1,-1
	stop

	//Задание 1d. Перегрузите унарный оператор +/- 
            pt3 = -pt1;
            std::cout << pt3.getX() << ":" << pt3.getY() << "\n";//-1,-1
            pt3 = +pt1;
            std::cout << pt3.getX() << ":" << pt3.getY() << "\n";//1,1
        }        

/**/


	//Задание 1d. Перегрузите оператор << (вывода в поток) для
	//класса MyString таким образом, чтобы при выполнении приведенной строки
	//на экран было выведено:
	//contents:  "QWERTY"

        {    
            MyString s("QWERTY");
            std::cout << s << std::endl;

            //Задание 1е Перегрузите оператор + и += для класса MyString
            MyString s1("ABC"), s2("kkk");
            s1 +=s;
            s2 = s+s1;
            
            std::cout << s1 << std::endl; //ABCQWERTY
            std::cout << s2 << std::endl; //QWERTYABCQWERTY
        }
	stop
/**/
	//Задание 2. Разработать "базу данных" о сотрудниках посредством ассоциативного
	//массива. Ключом является фамилия (ключ в задании уникален, поэтому нескольких Ивановых
	//в базе быть не может), а данными: пол, возраст, должность, зарплата...
	//Реализуйте:
	//добавление сотрудников в базу
	//исключение
	//вывод информации о конкретном сотруднике
	//вывод всей (или интересующей) информации о всех сотрудниках
	//Например:
/*
		BD bd;	//создание пустой базы
		bd["Ivanov"] = Data(30,MALE,<остальные данные>);	//если Ivanov-а в базе еще нет, то
						//добавление, если уже есть, то замена его реквизитов
		std::cout<<bd;	//вывод информации обо всех сотрудниках
		//А также:
		// BD bdnew = bd;
		//
		// bdnew = bd;

		//А также можно вспомнить про семантику перемещения...


*/
	
	return 0;
}//endmain

